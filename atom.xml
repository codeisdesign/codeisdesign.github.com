<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[codeisdesign]]></title>
  <link href="http://codeisdesign.github.com/atom.xml" rel="self"/>
  <link href="http://codeisdesign.github.com/"/>
  <updated>2012-01-10T08:02:37+02:00</updated>
  <id>http://codeisdesign.github.com/</id>
  <author>
    <name><![CDATA[Sami Mäkelä]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Grails Spring Security RADIUS Plugin and Mobile One-Time Password]]></title>
    <link href="http://codeisdesign.github.com/blog/2011/12/14/grails-spring-security-radius-plugin-and-mobile-one-time-password/"/>
    <updated>2011-12-14T00:00:00+02:00</updated>
    <id>http://codeisdesign.github.com/blog/2011/12/14/grails-spring-security-radius-plugin-and-mobile-one-time-password</id>
    <content type="html"><![CDATA[<p>I released today <a href="http://grails.org/plugin/spring-security-radius">spring security <span class="caps">RADIUS</span> plugin</a>. Motivation behind this plugin was to enable one-time passwords for Grails applications.</p>
<p>Static passwords are not very safe way to authenticate. If intruder gets password, he can simply login to the system. One-time password helps to overcome this shortcoming. If intruder gets the password, it is no longer valid.</p>
<p>I tried to find open source <span class="caps">OTP</span> project and found <a href="http://motp.sourceforge.net/"><span class="caps">MOTP</span></a> project. Project started back in 2003 and it offers authentication server which is <span class="caps">RADIUS</span> server that supports authentication with <span class="caps">OTP</span> tokens and client that is used to generate OTPs for the authentication.</p>
<p>In development I used <a href="http://motp-as.network-cube.de/">Mobile-<span class="caps">OTP</span> Authentication Server</a> which is out-of-the-box authentication server. It&#8217;s really simple to install to your virtualization environment such as <a>Virtual Box</a>.</p>
<p>You can find tutorial from <a href="http://smakela.github.com/grails-spring-security-radius/">plugin documentation</a> how to secure your Grails application with one-time password.</p>
<p>Enjoy your secure Grails application!</p>]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Groovy & Grails Exchange 2011]]></title>
    <link href="http://codeisdesign.github.com/blog/2011/12/11/groovy-grails-exchange-2011/"/>
    <updated>2011-12-11T00:00:00+02:00</updated>
    <id>http://codeisdesign.github.com/blog/2011/12/11/groovy-grails-exchange-2011</id>
    <content type="html"><![CDATA[<p>Although I could not be in the Groovy &amp; Grails Exchange, I have watched lot of speaks from the conference.</p>
<p>Really enjoyed Guillaume&#8217;s keynote about Groovy 1.8, Burt Beckwith talk about Spring Security Core plugin and Groovy running on Android (Discobot).</p>
<p>I was glad to hear that Grails 2.0 <span class="caps">FINAL</span> will be released next week. Really good news, because it&#8217;s gonna make my life easier on daily basis.</p>
<p>If you missed the conference as I did, you can go the Skills Matter website and check all the great speaks from the conference.</p>
<p><a href="http://skillsmatter.com/event/groovy-grails/groovy-grails-exchange-2011" target="_blank">http://skillsmatter.com/event/groovy-grails/groovy-grails-exchange-2011</a></p>]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[GORM and performance]]></title>
    <link href="http://codeisdesign.github.com/blog/2011/11/22/gorm-and-performance/"/>
    <updated>2011-11-22T00:00:00+02:00</updated>
    <id>http://codeisdesign.github.com/blog/2011/11/22/gorm-and-performance</id>
    <content type="html"><![CDATA[<p>Have not been really active with this blog (my first intention was only post the <span class="caps">CAS</span> tutorial), but I think I start writing about what I find interesting in the world of software. Promise!</p>
<p>I just watched Burt&#8217;s <a href="http://www.infoq.com/presentations/GORM-Performance">Advanced <span class="caps">GORM</span> &#8211; Performance, Customization and Monitoring</a> -presentation. And also read the article <a href="http://burtbeckwith.com/blog/?p=1029">Hibernate Bags in Grails 2.0</a>.</p>
<p>So using maps in domain objects (hasMany) is bad, since there is no Hibernate Bags (not guaranteed to be unique or in order) support in <span class="caps">GORM</span> before Grails 2.0. New version of Grails adds the Bags support, but we have still problems.</p>
<p>Now I understand lot more about how the <span class="caps">GORM</span> works &#8220;under the hood&#8221;, so I recommend you to go through these articles.</p>
<p>Hopefully these are corrected before the Grails 2.0 <span class="caps">FINAL</span> is released.</p>]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Grails and single-sign on]]></title>
    <link href="http://codeisdesign.github.com/blog/2011/07/19/grails-and-single-sign-on/"/>
    <updated>2011-07-19T00:00:00+03:00</updated>
    <id>http://codeisdesign.github.com/blog/2011/07/19/grails-and-single-sign-on</id>
    <content type="html"><![CDATA[<h2>Introduction</h2>
<p style="text-align:left;">I could not find step by step instructions how to set two simple Grails applications to use single-sign on, so this first blog post is going cover that.</p>
<p>My case was this:</p>
<blockquote>
<p>When logged in to a secured application, how to see content on another secured application without login hell?</p>
</blockquote>
<p>Obvious answer was to use single-sign on. For end user point of view it&#8217;s just one login and you are good to go.</p>
<p>Sound pretty nice, but how to accomplish this in Grails?</p>
<p>To make our application secure Mr. <a href="http://burtbeckwith.com/" target="_blank">Burt Beckwith</a> has created a collection of Spring Security plugins.</p>
<p>We are going to user Spring Security Core plugin and Spring Security <span class="caps">CAS</span> plugin.</p>
<p><strong><span class="caps">CAS</span></strong> stands for <strong>Central Authentication Service</strong>. It&#8217;s a single-sign on protocol for the web.</p>
<h2>Setting up Tomcat for <span class="caps">CAS</span> server</h2>
<p>First you need some servlet a container. In this example we use Apache Tomcat (I used version 7).</p>
<p><a href="http://tomcat.apache.org/" target="_blank">Download Apache Tomcat</a></p>
<p>Unarchive Apache Tomcat to some directory in your computer.</p>
<p>We must configure <span class="caps">CAS</span> to use <span class="caps">SSL</span> so we need to create Certificate Keystore:</p>
<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$JAVA_HOME/bin/keytool -genkey -alias cas -keyalg RSA</span></code></pre></td></tr></table></div></figure></div></notextile><br />
<div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>keytool -genkey -alias cas -keyalg RSA
</span><span class='line'>Enter keystore password:
</span><span class='line'>Re-enter new password:
</span><span class='line'>What is your first and last name?
</span><span class='line'>  [Unknown]:  localhost
</span><span class='line'>What is the name of your organizational unit?
</span><span class='line'>  [Unknown]:  Test
</span><span class='line'>What is the name of your organization?
</span><span class='line'>  [Unknown]:  Test
</span><span class='line'>What is the name of your City or Locality?
</span><span class='line'>  [Unknown]:
</span><span class='line'>What is the name of your State or Province?
</span><span class='line'>  [Unknown]:
</span><span class='line'>What is the two-letter country code for this unit?
</span><span class='line'>  [Unknown]:
</span><span class='line'>Is CN=localhost, OU=Test, O=Test, L=Unknown, ST=Unknown, C=Unknown correct?
</span><span class='line'>  [no]:  yes
</span><span class='line'>
</span><span class='line'>Enter key password for &lt;cas&gt;
</span><span class='line'>	(RETURN if same as keystore password):</span></code></pre></td></tr></table></div></figure></div></notextile></p>
<p>Default password for keystore that Tomcat uses is &#8220;changeit&#8221;. So we are going to use that. Command creates .keystore -file to your home directory.</p>
<p>Now go to the <strong>conf/ *-folder of Tomcat and open the</strong> server.xml *-file. We have to add <span class="caps">SSL</span> Connector:</p>
<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;Connector
</span><span class='line'>port=&quot;8443&quot; maxThreads=&quot;200&quot;
</span><span class='line'>scheme=&quot;https&quot; secure=&quot;true&quot; SSLEnabled=&quot;true&quot;
</span><span class='line'>keystoreFile=&quot;${user.home}/.keystore&quot; keystorePass=&quot;changeit&quot;
</span><span class='line'>clientAuth=&quot;false&quot; sslProtocol=&quot;TLS&quot;/&gt;</span></code></pre></td></tr></table></div></figure></div></notextile></p>
<p>Now we have set up our Tomcat to use <span class="caps">SSL</span> we need to export the certificate and import it as a &#8220;trusted&#8221; certificate to our &#8220;cacerts&#8221; keystore in Java Runtime (<span class="caps">JRE</span>) <strong>lib/security</strong> -folder.</p>
<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$JAVA_HOME/bin/keytool -export -alias cas -file ~/cas.crt -keystore ~/.keystore</span></code></pre></td></tr></table></div></figure></div></notextile><br />
<div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$JAVA_HOME/bin/keytool -import -alias cas -file ~/cas.crt -keystore $JAVA_HOME/jre/lib/security/cacerts</span></code></pre></td></tr></table></div></figure></div></notextile></p>
<p>For Mac users &#8220;cacerts&#8221; can be found from <strong>/Library/Java/Home/lib/security/cacerts</strong>. (Note! You must use sudo to apply the command)</p>
<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Enter keystore password:
</span><span class='line'>Owner: CN=localhost, OU=Test, O=Test, L=Unknown, ST=Unknown, C=Unknown
</span><span class='line'>Issuer: CN=localhost, OU=Test, O=Test, L=Unknown, ST=Unknown, C=Unknown
</span><span class='line'>Serial number: 4e25a98a
</span><span class='line'>Valid from: Tue Jul 19 18:58:02 EEST 2011 until: Mon Oct 17 18:58:02 EEST 2011
</span><span class='line'>Certificate fingerprints:
</span><span class='line'>	 MD5:  E8:B7:11:26:87:81:77:18:78:E1:6F:81:5B:29:BF:6E
</span><span class='line'>	 SHA1: AE:8D:3A:16:29:B2:84:58:4D:DC:15:53:F7:F5:15:34:BB:E2:70:3A
</span><span class='line'>	 Signature algorithm name: SHA1withRSA
</span><span class='line'>	 Version: 3
</span><span class='line'>Trust this certificate? [no]:  yes
</span><span class='line'>Certificate was added to keystore</span></code></pre></td></tr></table></div></figure></div></notextile></p>
<p>That is all you have to modify from the Tomcat (<strong><span class="caps">NOTE</span>: This is not a production set up!</strong>)</p>
<h2>Configure and Compile <span class="caps">CAS</span> server</h2>
<p>Now we need to download, configure and compile the <span class="caps">CAS</span> server (I used version 3.4.8).</p>
<p><a href="http://www.jasig.org/cas/download">Download <span class="caps">CAS</span> Server</a></p>
<p>Unarchive <span class="caps">CAS</span> Server to some directory in your computer.</p>
<p>In this setup we are going to use text file as a user database for authentication. It&#8217;s pretty handy for testing purposes. It&#8217;s not recommended for production setup.</p>
<p>Go to the* cas-server-webapp/* -folder in the <span class="caps">CAS</span> Server and open* pom.xml* -file. We need to add dependency to cas-server-support-generic -module.</p>
<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;dependency&gt;
</span><span class='line'>     		&lt;groupId&gt;${project.groupId}&lt;/groupId&gt;
</span><span class='line'>     		&lt;artifactId&gt;cas-server-support-generic&lt;/artifactId&gt;
</span><span class='line'>     		&lt;version&gt;${project.version}&lt;/version&gt;
</span><span class='line'>		&lt;/dependency&gt;</span></code></pre></td></tr></table></div></figure></div></notextile></p>
<p>Go to <strong>cas-server-webapp/src/main/webapp/<span class="caps">WEB</span>-<span class="caps">INF</span>/</strong> -folder in the <span class="caps">CAS</span> Server and open <strong>deployerConfigContext.xml</strong> -file.</p>
<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;bean class=&quot;org.jasig.cas.adaptors.generic.FileAuthenticationHandler&quot; p:fileName=&quot;file:/path/to/file/authentication_database.txt&quot; /&gt;</span></code></pre></td></tr></table></div></figure></div></notextile></p>
<p>Replace SimpleTestUsernamePasswordAuthenticationHandler with FileAuthenticationHandler in the section &#8220;auhenticationHandlers&#8221;.</p>
<p>Create <strong>authentication_database.txt</strong> -file  that holds username/password pairs. Change the path in FileAuthenticationHandler to point to your file.</p>
<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>codeisdesign::password
</span><span class='line'>admin::password</span></code></pre></td></tr></table></div></figure></div></notextile></p>
<p>Go to the <strong>cas-server-webapp/</strong> -folder in the <span class="caps">CAS</span> Server and create war -package from the webapp. You need to run:</p>
<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>mvn package</span></code></pre></td></tr></table></div></figure></div></notextile></p>
<p>Now you have <strong>cas.war</strong> in your <strong>cas.server-webapp/target/</strong> -folder. Copy <strong>cas.war</strong> -file to your Tomcat installations* webapps/* -folder and you have <span class="caps">CAS</span> Server installed.</p>
<h2>Configuring your Grails applications</h2>
<p>In this example I have two Grails applications &#8220;sso-example-1&#8221; and &#8220;sso-example-2&#8221;, which both have single controller and they are secured with Spring Security.</p>
<p>Here&#8217;s the scenario:</p>
<ol>
	<li>User goes to &#8220;sso-example-1&#8221; application -&gt; http://localhost:8081/sso-example-1</li>
	<li>User gets redirected to the <span class="caps">CAS</span> Server for authentication.</li>
	<li>After authentication user is redirected back to the &#8220;sso-example-1&#8221;</li>
	<li>User goes to &#8220;sso-example-2&#8221; application  -&gt; http://localhost:8082/sso-example-2</li>
	<li>User is already authenticated and content is shown.</li>
</ol>
<p>You must configure <span class="caps">CAS</span> plugin in your applications <strong>Config.groovy</strong> -file.</p>
<p>Here&#8217;s configuration for &#8220;sso-example-1&#8221; and &#8220;sso-example-2&#8221;</p>
<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>grails.plugins.springsecurity.cas.loginUri = '/login'
</span><span class='line'>grails.plugins.springsecurity.cas.serviceUrl = 'http://localhost:8081/sso-example-1/j_spring_cas_security_check'
</span><span class='line'>grails.plugins.springsecurity.cas.serverUrlPrefix = 'https://localhost:8443/cas'
</span><span class='line'>grails.plugins.springsecurity.cas.proxyCallbackUrl = 'http://localhost:8081/sso-example-1/secure/receptor'
</span><span class='line'>grails.plugins.springsecurity.cas.proxyReceptorUrl = '/secure/receptor'
</span><span class='line'>grails.plugins.springsecurity.logout.afterLogoutUrl ='https://localhost:8443/cas/logout?url=http://localhost:8081/sso-example-1/'</span></code></pre></td></tr></table></div></figure></div></notextile></p>
<p>&nbsp;</p>
<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>grails.plugins.springsecurity.cas.loginUri = '/login'
</span><span class='line'>grails.plugins.springsecurity.cas.serviceUrl = 'http://localhost:8082/sso-example-2/j_spring_cas_security_check'
</span><span class='line'>grails.plugins.springsecurity.cas.serverUrlPrefix = 'https://localhost:8443/cas'
</span><span class='line'>grails.plugins.springsecurity.cas.proxyCallbackUrl = 'http://localhost:8082/sso-example-2/secure/receptor'
</span><span class='line'>grails.plugins.springsecurity.cas.proxyReceptorUrl = '/secure/receptor'
</span><span class='line'>grails.plugins.springsecurity.logout.afterLogoutUrl ='https://localhost:8443/cas/logout?url=http://localhost:8082/sso-example-2/'</span></code></pre></td></tr></table></div></figure></div></notextile></p>
<p>More about plugin configuration you can find from the <a href="http://burtbeckwith.github.com/grails-spring-security-cas/" target="_blank">plugin homepage</a>.</p>
<p>We also need same users to exist in the application which were in the <strong>authentication_database.txt. </strong>That is done in Bootstrap.groovy.<br />
<div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;span class="Apple-style-span" style="font-family:Georgia, 'Times New Roman', 'Bitstream Charter', Times, serif;font-size:13px;line-height:19px;white-space:normal;">Now we have configured applications and we are ready to test! Start your Tomcat instance (CAS Server), "sso-example-1" and "sso-example-2"*.*&lt;/span></span></code></pre></td></tr></table></div></figure></div></notextile><br />
<span class="caps">CAS</span> Server is running in 8080 and 8443 ports so you need to run &#8220;sso-example-1&#8221; on port 8081 and &#8220;sso-example-2&#8221; on port 8082 as configured in Config.groovy. To do this, you can define port in the run-app -command:</p>
<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>grails -Dserver.port=8081 run-app</span></code></pre></td></tr></table></div></figure></div></notextile></p>
<p>Just go to<a href="http://localhost:8081/sso-example-1" target="_blank"> http://localhost:8081/sso-example-1</a> and authenticate. Then go to  <a href="http://localhost:8082/sso-example-2" target="_blank">http://localhost:8082/sso-example-2</a> and that&#8217;s it. No more another login.</p>
<p>You can find source codes for both applications from Github.com</p>
<p><a href="https://github.com/smakela/sso-example-1" target="_blank">Get <span class="caps">SSO</span> Example 1</a><br />
<a href="https://github.com/smakela/sso-example-2" target="_blank">Get <span class="caps">SSO</span> Example 2</a></p>
<p>If you have any questions, please leave a comment!</p>]]></content>
  </entry>
  
</feed>
